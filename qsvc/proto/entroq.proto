syntax = "proto3";

package proto;

// TaskID contains the ID and version of a task. Together these make a unique
// identifier for that task.
message TaskID {
  string id = 1;
  int32 version = 2;
}

// TaskData contains only the data portion of a task. Useful for insertion.
message TaskData {
  // The name of the queue for this task.
  string queue = 1;

  // The epoch time in millis when this task becomes available.
  int64 at_ms = 2;

  // The task's opaque payload.
  bytes value = 3;
}

// TaskChange identifies a task by ID and specifies the new data it should contain.
// All fields should be filled in. Empty fields result in deleting data from that field.
message TaskChange {
  TaskID old_id = 1;
  TaskData new_data = 2;
}

// Task is a complete task object, containing IDs, data, and metadata.
message Task {
  // The name of the queue for this task.
  string queue = 1;

  string id = 2;
  int32 version = 3;

  // The epoch time in millis when this task becomes available.
  int64 at_ms = 4;


  // The UUID representing the claimant (owner) for this task.
  string claimant_id = 5;

  // The task's opaque payload.
  bytes value = 6;

  // Epoch times in millis for creation and update of this task.
  int64 created_ms = 7;
  int64 modified_ms = 8;
}

// QueueStats contains the name of the queue and the number of tasks within it.
message QueueStats {
  string name = 1;
  int32 num_tasks = 2;
}

// ClaimRequest is sent to attempt to claim a task from a queue. The claimant ID
// should be unique to the requesting worker (e.g., if multiple workers are in
// the same process, they should all have different claimant IDs assigned).
message ClaimRequest {
  string claimant_id = 1;

  string queue = 2;
  int64 duration_ms = 3;
}

// ClaimResponse is returned when a claim is fulfilled or becomes obviously impossible.
message ClaimResponse {
  Task task = 1;
}

// ModifyRequest sends a request to modify a set of tasks with given
// dependencies. It is performed in a transaction, in which either all
// suggested modifications succeed and all dependencies are satisfied, or
// nothing is committed at all. A failure due to dependencies (in any
// of changes, deletes, or inserts) will be permanent.
//
// All successful changes will cause the requester to become the claimant.
message ModifyRequest {
  string claimant_id = 1;

  repeated TaskData inserts = 2;
  repeated TaskChange changes = 3;
  repeated TaskID deletes = 4;
  repeated TaskID depends = 5;
}

// ModifyResponse returns inserted and updated tasks when successful.
// A dependency error (which is permanent) comes through as gRPC's NOT_FOUND code.
message ModifyResponse {
  repeated Task inserted = 1;
  repeated Task changed = 2;
}

enum DepType {
  CLAIM = 0;
  DELETE = 1;
  CHANGE = 2;
  DEPEND = 3;
}

// ModifyDep can be returned with a gRPC NotFound status indicating which
// dependencies failed. This is done via the gRPC error return, not directly
// in the response proto.
message ModifyDep {
  DepType type = 1;
  TaskID id = 2;
}

// TasksRequest is sent to request a complete listing of tasks for the
// given queue. If claimant_id is empty, all tasks (not just expired
// or owned tasks) are returned.
message TasksRequest {
  string claimant_id = 1;
  string queue = 2;
}

// TasksReqponse contains the tasks requested.
message TasksResponse {
  repeated Task tasks = 1;
}

// QueuesRequest is sent to request a listing of all known queues.
message QueuesRequest {
}

// QueuesResponse contains the requested list of queue statistics.
message QueuesResponse {
  repeated QueueStats queues = 1;
}

// EntroQ is a service that allows for access to a task queue.
service EntroQ {
  rpc TryClaim(ClaimRequest) returns (ClaimResponse);
  rpc Modify(ModifyRequest) returns (ModifyResponse);
  rpc Tasks(TasksRequest) returns (TasksResponse);
  rpc Queues(QueuesRequest) returns (QueuesResponse);
}
